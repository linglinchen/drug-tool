<?php

/* Change monograph names to be lowercase globally, except tallman

	Expected results from sample data:
	42 ignored (eg, firmly, xmlns:mml)
	16 mL ignored
	2543 changed
*/

namespace App\Console\Commands;

use Illuminate\Console\Command;

use App\Atom;
use App\Product;

class QuickFixLowercase extends Command {
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'quickfix:lowercase {productId}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'This command change monograph names which are in groups to be lowercase globally, except tallman.';

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle() {
         $productId = (int)$this->argument('productId');
        if(!$productId || !Product::find($productId)) {
            throw new \Exception('Invalid product ID.');
        }      
        self::_changeToLowercase($productId);
    }

    public static function _changeToLowercase($productId) {
        $correctList = self::_getCorrectList();
        ini_set('memory_limit', '1280M');
        $atoms = Atom::whereIn('id', function ($q) {
                    Atom::buildLatestIDQuery(null, $q);
                })->where('product_id','=', $productId)->get();
       $logFileNot = fopen(base_path() . '/data/test/not_in_the_list.txt', 'w');
        foreach($atoms as $atom) {
            $alphaTitle = $atom->alpha_title;
            $alphaTitleLower = strtolower($alphaTitle);
            //check on xml for the monographs in a group
            $xml = $atom->xml;
            //add this header to xml so later processing won't do unwanted encoding, e. g. change '-' to &#x2014
            $xml = '<?xml version="1.0" encoding="UTF-8"?>'.$xml;
            $xmlObject = simplexml_load_string($xml); 

            //get <mono_name> in a group
            $monoNames = $xmlObject->xpath('//group//mono_name');
            foreach ($monoNames as $monoName){
                $monoNameNoRx = preg_replace('/\s\(.*\)$/','',$monoName);
                $monoNameNoRxLower = strtolower($monoNameNoRx);
                if ($monoNameNoRxLower !== $monoNameNoRx){
                    echo 'Chapter: '.$atom->molecule_code."\tGroup: ".$alphaTitle." || ".$monoName."\n";
                } 
            }

            $xmlString = $xmlObject->asXML();
        
            //remove the header line that's generated by asXML()
            $newXml = preg_replace('/<\?xml version="1\.0" encoding="UTF-8"\?>\n/', '', $xmlString);

            if($newXml !== $atom->xml) {
                $newAtom = $atom->replicate();
                $newAtom->xml = $newXml;
                $newAtom->modified_by = null;
              
                //$newAtom->save();
            }

            $flag = 0;
            foreach ($correctList as $k => $v){
                if ($k == $alphaTitleLower){ //if this atom is in correctList
                    if ($alphaTitle != $v){
                        echo 'in the list '.$alphaTitle."\n";
                    }else{
                         // echo $alpha_title." equal \n";
                    }
                    $flag = 1;
                    break;
                }
            }

            if ($flag === 0){  //didn't find the atom in the correctList
                //check if it has capital letter in name
                if($alphaTitle !== $alphaTitleLower){
                    echo fwrite($logFileNot, $alphaTitle."\n");
                }
            }
        }
        fclose($logFileNot);
    

    }

     /**
     * Get the correct monograph list.
     *
     * @return array An associative array containing the monographs with correct names
     */
    protected static function _getCorrectList() {
        $correctList = [];
        $fileName = base_path() . '/data/import/NDR_TOC.txt';
        $fh = fopen($fileName, 'r');
        
        while(!feof($fh)){
            $line = fgets($fh);
            $line = rtrim($line);
            if (preg_match('/^Chapter|^\s+/', $line) || strlen($line) === 0 ){
                continue;
            }
            $lc = strtolower($line);
            $correctList[$lc] = $line;
        }
        fclose($fh);
        return $correctList;
    }
}