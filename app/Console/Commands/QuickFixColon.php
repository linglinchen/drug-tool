<?php

/* Fix misplaced colons (colon should be in the head, but is in following text)
*/

namespace App\Console\Commands;

use Illuminate\Console\Command;

use App\Atom;
use App\Product;
use Illuminate\Support\Facades\DB;

class QuickFixColon extends Command {
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'quickfix:colon {productId}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'This command place the colons back in the head from the text paragraph.';

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle() {
         $productId = (int)$this->argument('productId');
        if(!$productId || !Product::find($productId)) {
            throw new \Exception('Invalid product ID.');
        }      
        self::_fixMisplacedColon($productId);
    }

    public static function _fixMisplacedColon($productId) {
       $sql = "select id, alpha_title, xml from atoms 
            where id IN (" . Atom::buildLatestIDQuery()->toSql() . ")
            AND cast (xpath('//para[starts-with(.,\":\")]', xml::xml) as text[]) != '{}'"; 
        
        $atoms = DB::select($sql);
        $atomsArray = json_decode(json_encode($atoms), true);  //convert object to array
        $totalDetectedAtoms = sizeof($atomsArray);
        $changedAtoms = 0;
        $changedSec = 0;
        $changedPara = 0;
        foreach($atomsArray as $atom) {
            $xml = $atom['xml'];
            $atomModel = Atom::find($atom['id']);

            //add this header to xml so later processing won't do unwanted encoding, e. g. change '-' to &#x2014
            $xml = '<?xml version="1.0" encoding="UTF-8"?>'.$xml;
            $xmlObject = simplexml_load_string($xml); 

            //get the para that start with ":"
            $paras = $xmlObject->xpath('//para[starts-with(.,":")]');

            foreach ($paras as $para){
             $dom = dom_import_simplexml($para);
             $currentNodeValue = $dom->nodeValue;
             if (preg_match('/^:/', $currentNodeValue)){
                $newNodeValue = preg_replace("/^:/", '', $currentNodeValue);
                $dom->nodeValue = $newNodeValue;
                $changedPara++;
             }
             
             //find the sec_title before the para 
             $secTitle = $para->xpath('ancestor-or-self::section[1]/sec_title[1]'); 
                $domSec = dom_import_simplexml($secTitle[0]);
                $currentSec = trim($domSec->nodeValue);
                if (!preg_match('/:$/', $currentSec)){
                    $newSec = $currentSec.':'; 
                    $domSec->nodeValue = $newSec;
                    $changedSec++;
                }
            }
             

            $xmlString = $xmlObject->asXML();
        
            //remove the header line that's generated by asXML()
            $newXml = preg_replace('/<\?xml version="1\.0" encoding="UTF-8"\?>\n/', '', $xmlString);

            if($newXml !== $atomModel->xml) {
                $newAtom = $atomModel->replicate();
                $newAtom->xml = $newXml;
                $newAtom->modified_by = null;
                $changedAtoms++;
                $newAtom->save();
            }
        }

        /* output messages */
        echo 'affected Atoms: '.$totalDetectedAtoms."\n";
        echo 'changed Atoms: '.$changedAtoms."\n";
        echo 'total changed Sec_title: '.$changedSec."\n";
        echo 'total changed Para: '.$changedPara."\n";
    }
}